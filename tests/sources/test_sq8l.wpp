// -*- mode: c++; -*-

#include "host_sq8l.h"
#include "cws/cws80_program.h"
#include "utility/scope_guard.h"
#include "utility/types.h"
#include <sndfile.h>
#include <getopt.h>
#include <boost/lexical_cast.hpp>
#include <algorithm>
#include <string>
#include <deque>
#include <memory>
#include <thread>
#include <mutex>
#include <cmath>
#include <cstdio>
#include <io.h>

struct Subcommand {
    const char *name;
    const char *description;
    int (*entry)(int argc, char *argv[]);
};

extern Subcommand subcommands[];

//------------------------------------------------------------------------------
int main(int argc, char *argv[])
{
    if (argc < 2) {
        fprintf(stderr, "Usage: test_sq8l <subcommand> <args>\n"
                        "\n"
                        "Available subcommands:\n");
        for (Subcommand *sp = subcommands; sp->name; ++sp)
            fprintf(stderr, "  %-30s -- %s\n", sp->name, sp->description);
        return 1;
    }

    ++argv;
    --argc;

    Subcommand *cmd = nullptr;
    for (Subcommand *sp = subcommands; !cmd && sp->name; ++sp)
        if (!strcmp(sp->name, argv[0]))
            cmd = sp;

    if (!cmd)
        return 1;

    return cmd->entry(argc, argv);
}

static const char vst_default_name[] = "SQ8L.dll";
static constexpr f32 default_srate = 44100;
static constexpr u32 default_bsize = 512;

//------------------------------------------------------------------------------
int cmd_synth(int argc, char *argv[])
{
    const char *vst_name = vst_default_name;
    constexpr f32 srate = default_srate;
    constexpr u32 bsize = default_bsize;
    const char *output_file = nullptr;

    u32 program = 0;

    uint note = 69;
    uint vel = 100;

    float ton = 1.0;
    float toff = 1.0;

    for (int c; (c = getopt(argc, argv, "o:p:")) != -1;) {
        switch (c) {
        case 'o':
            output_file = optarg;
            break;
        case 'p':
            program = boost::lexical_cast<u32>(optarg);
            break;
        default:
            return 1;
        }
    }

    uint count = argc - optind;
    if (count != 0) {
        fprintf(stderr, "Bad number of positional arguments.\n");
        return 1;
    }

    if (!output_file) {
        fprintf(stderr, "No output file given.\n");
        return 1;
    }

    Host_SQ8L host(vst_name, srate, bsize);
    if (!host)
        return 1;

    host.set_current_program(program);
    if (host.get_current_program() != program) {
        fprintf(stderr, "Failed to set current program: %u\n", program);
        return 1;
    }

    fprintf(stderr, "> Current program: %u \"%s\"\n",
            program, host.get_current_program_name().c_str());

    ///
    SF_INFO sndinfo = {};
    sndinfo.samplerate = srate;
    sndinfo.channels = 2;
    sndinfo.format = SF_FORMAT_WAV|SF_FORMAT_PCM_16;
    SNDFILE *snd = sf_open(output_file, SFM_WRITE, &sndinfo);
    if (!snd) {
        fprintf(stderr, "Cannot open sound file for writing.\n");
        return 1;
    }
    SCOPE(exit) { sf_close(snd); };

    //
    u32 frames_on = (u32)std::ceil(ton * srate);
    u32 frames_off = (u32)std::ceil(toff * srate);

    const u8 note_on_msg[] = {0x90, (u8)(note & 127), (u8)(vel & 127)};
    const u8 note_off_msg[] = {0x80, (u8)(note & 127), (u8)(vel & 127)};

    std::unique_ptr<f32[]> buffer(new f32[2 * std::max<size_t>(frames_on, frames_off)]);

    host.send_midi(note_on_msg, sizeof(note_on_msg));
    host.process(buffer.get(), frames_on);
    sf_writef_float(snd, buffer.get(), frames_on);

    host.send_midi(note_off_msg, sizeof(note_off_msg));
    host.process(buffer.get(), frames_off);
    sf_writef_float(snd, buffer.get(), frames_off);

    return 0;
}

//------------------------------------------------------------------------------
int cmd_list_programs(int argc, char *argv[])
{
    const char *vst_name = vst_default_name;
    constexpr f32 srate = default_srate;
    constexpr u32 bsize = default_bsize;

    for (int c; (c = getopt(argc, argv, "")) != -1;) {
        switch (c) {
        default:
            return 1;
        }
    }

    uint count = argc - optind;
    if (count != 0) {
        fprintf(stderr, "Bad number of positional arguments.\n");
        return 1;
    }

    Host_SQ8L host(vst_name, srate, bsize);
    if (!host)
        return 1;

    u32 num_programs = host.num_programs();
    for (u32 program = 0; program < num_programs; ++program) {
        host.set_current_program(program);
        if (host.get_current_program() != program) {
            fprintf(stderr, "Failed to set current program: %u\n", program);
            return 1;
        }
        printf("%3u %s\n", program, host.get_current_program_name().c_str());
    }

    return 0;
}

//------------------------------------------------------------------------------
int cmd_read_program(int argc, char *argv[])
{
    const char *vst_name = vst_default_name;
    constexpr f32 srate = default_srate;
    constexpr u32 bsize = default_bsize;
    u32 program = 0;

    for (int c; (c = getopt(argc, argv, "")) != -1;) {
        switch (c) {
        default:
            return 1;
        }
    }

    uint count = argc - optind;
    if (count != 1) {
        fprintf(stderr, "Bad number of positional arguments.\n");
        return 1;
    }

    program = strtoul(argv[optind], nullptr, 0);

    Host_SQ8L host(vst_name, srate, bsize);
    if (!host)
        return 1;

    u32 num_programs = host.num_programs();
    if (program >= num_programs) {
        fprintf(stderr, "Program number out of range.\n");
        return 1;
    }

    host.set_current_program(program);
    dynarray<u8> chunk = host.get_current_program_chunk();

    if (_isatty(_fileno(stdout))) {
        fprintf(stderr, "Not writing binary data to the terminal.\n");
        return 1;
    }

    fwrite(chunk.data(), 1, chunk.size(), stdout);
    fflush(stdout);

    return 0;
}

//------------------------------------------------------------------------------
int cmd_shell(int argc, char *argv[])
{
    const char *vst_name = vst_default_name;
    constexpr f32 srate = default_srate;
    constexpr u32 bsize = default_bsize;

    for (int c; (c = getopt(argc, argv, "")) != -1;) {
        switch (c) {
        default:
            return 1;
        }
    }

    uint count = argc - optind;
    if (count != 0) {
        fprintf(stderr, "Bad number of positional arguments.\n");
        return 1;
    }

    Host_SQ8L host(vst_name, srate, bsize);
    if (!host)
        return 1;

    Vst_ERect *rect = nullptr;
    host.get_editor_rect(&rect);
    if (!rect)
        return 1;

    HINSTANCE hinst = GetModuleHandle(nullptr);

    WNDCLASSEX wc;
    memset(&wc, 0, sizeof(wc));
    wc.cbSize = sizeof(wc);
    wc.style = 0;
    wc.lpfnWndProc = &DefWindowProc;
    wc.hInstance = hinst;
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
    wc.lpszClassName = "SQ8L Host";
    if (!RegisterClassEx(&wc))
        return 1;

    HWND wnd = CreateWindowEx(
        WS_EX_OVERLAPPEDWINDOW,
        wc.lpszClassName,
        "SQ8L Host",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        rect->right - rect->left, rect->bottom - rect->top,
        nullptr, nullptr, hinst, nullptr);

    ShowWindow(wnd, SW_SHOW);
    UpdateWindow(wnd);

    host.open_editor(wnd);

    SetTimer(wnd, 0, 50, nullptr);

    std::deque<std::string> cmdqueue;
    std::mutex cmdexcl;

    std::thread console_reader(
        [&cmdqueue, &cmdexcl]() {
            uint ch;
            std::string cmd;
            while ((ch = fgetc(stdin)) != EOF) {
                if (ch != '\n')
                    cmd.push_back(ch);
                else {
                    std::lock_guard<std::mutex> lock(cmdexcl);
                    cmdqueue.push_back(cmd);
                    cmd.clear();
                }
            }
        });
    console_reader.detach();

    MSG msg;
    for (bool is_open = true; is_open && GetMessage(&msg, nullptr, 0, 0);) {
        if (msg.message == WM_SYSCOMMAND && msg.hwnd == wnd && msg.wParam == SC_CLOSE) {
            is_open = false;
        }
        else if (msg.message == WM_TIMER && msg.hwnd == wnd)
            host.idle_editor();
        else {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }

        std::lock_guard<std::mutex> lock(cmdexcl);
        while (!cmdqueue.empty()) {
            std::string cmd = cmdqueue.front();
            cmdqueue.pop_front();

            /* TODO: shell command processing */
        }
    }

    host.close_editor();
    DestroyWindow(wnd);

    #pragma message("TODO: the SQ8L shell")

    return 0;
}

//------------------------------------------------------------------------------
Subcommand subcommands[16] = {
    {"synth", "Synthesize a note", &cmd_synth},
    {"list-programs", "List programs", &cmd_list_programs},
    {"read-program", "Read program", &cmd_read_program},
    {"shell", "Run test shell", &cmd_shell},
    {},
};
